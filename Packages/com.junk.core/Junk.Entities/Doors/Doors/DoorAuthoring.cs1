using CyberJunk.Entities;
using Unity.Entities;
using Unity.Mathematics;
using Unity.Physics;
using Unity.Physics.Authoring;
using Unity.Transforms;
using UnityEngine;

namespace Junk.Entities
{
    [DisallowMultipleComponent]
    [SelectionBase]
    public class DoorAuthoring : MonoBehaviour, icgte
    {
        [Header("Trigger")]
        public PhysicsCategoryTags triggerBelongsTo;
        public PhysicsCategoryTags triggerCollidesWith;
        public Vector3 triggerCenter;
        public Vector3 triggerDimensions = Vector3.one;
    
        [Header("Door")]
        public bool3 rotationAxis;
        public float3 rotationAngle;
        public float3 rotationPivot;
    
        [Header("Collider")]
        public Vector3 colliderShape = Vector3.one;
        public Vector3 colliderOffset = Vector3.zero;
        public PhysicsCategoryTags colliderBelongsTo;
        public PhysicsCategoryTags colliderCollidesWith;
    
        public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)
        {
            /////////////////////////////////////
            // Create the collider for the door
            /////////////////////////////////////
        
            var collider = conversionSystem.CreateAdditionalEntity(gameObject);
            dstManager.AddComponentData(collider, new Translation {Value = float3.zero});
            dstManager.AddComponentData(collider, new Rotation{Value     = quaternion.identity});
            dstManager.AddComponentData(collider, new LocalToWorld());
#if UNITY_EDITOR
            dstManager.SetName(collider, name + " Collider");
#endif
            var colliderFilter = CollisionFilter.Default;
            colliderFilter.BelongsTo    = colliderBelongsTo.Value;
            colliderFilter.CollidesWith = colliderCollidesWith.Value;
            var colliderMaterial = Unity.Physics.Material.Default;
            var colliderBlob = Unity.Physics.BoxCollider.Create(new BoxGeometry
            {
                BevelRadius = 0.001f,
                Center      = colliderOffset,
                Orientation = quaternion.identity,
                Size        = colliderShape
            }, colliderFilter, colliderMaterial);
            var colliderMass = new Unity.Physics.MassProperties();
        
            dstManager.AddComponentData(collider, new PhysicsCollider { Value = colliderBlob });
            dstManager.AddComponentData(collider, PhysicsMass.CreateKinematic(colliderMass));

        
            /////////////////////////////////////
            // Trigger for trigger queries
            /////////////////////////////////////
        
            var trigger = conversionSystem.CreateAdditionalEntity(gameObject);
#if UNITY_EDITOR
            dstManager.SetName(trigger, name + " Trigger");
#endif
            var filter = CollisionFilter.Default;
            filter.BelongsTo    = triggerBelongsTo.Value;
            filter.CollidesWith = triggerCollidesWith.Value;
            var material = Unity.Physics.Material.Default;
            material.CollisionResponse = CollisionResponsePolicy.RaiseTriggerEvents;
            //material.Flags = Material.MaterialFlags.IsTrigger;
        
            var blob = Unity.Physics.BoxCollider.Create(new BoxGeometry
            {
                BevelRadius = 0.001f,
                Center      = triggerCenter,
                Orientation = quaternion.identity,
                Size        = triggerDimensions
            }, filter, material);
            
        
            dstManager.AddComponentData(trigger, new PhysicsCollider { Value = blob });
            dstManager.AddComponentData(trigger, new PhysicsMass());
            dstManager.AddComponentData(trigger, new Translation {Value = transform.position});
            dstManager.AddComponentData(trigger, new Rotation{Value = transform.rotation});
            dstManager.AddComponentData(trigger, new LocalToWorld());
        
            // Link both entities together
            dstManager.AddComponentData(trigger, new DoorTrigger {Door = entity});
        
        
            /////////////////////////////////////
            // Door
            /////////////////////////////////////

            AddComponent(entity, new Door
            {
                Trigger = trigger,
                Collider = collider,
                OpenPosition   = transform.position + Vector3.up,
                ClosedPosition = transform.position,
                Speed          = 10,
                MovementDuraction = 0.2f
            });
            AddComponent(entity, new RotationEulerXYZ());
            AddComponent(entity, new CompositeRotation());
            AddComponent(entity, new RotationPivot {Value = rotationPivot});
        

        
            // ALso make a linkedentitygroup?
        }

        private void OnDrawGizmosSelected()
        {
            Gizmos.color = Color.white;
            Gizmos.DrawWireCube(triggerCenter + transform.position, triggerDimensions);
        
            Gizmos.color = Color.blue;
            Gizmos.DrawWireCube(transform.position + colliderOffset, colliderShape);
            Gizmos.color = new Color(0f, 0f, 1f, 0.15f);
            Gizmos.DrawCube(transform.position + colliderOffset, colliderShape);
        }

        public void FitColliderShape()
        {
            var meshFilter = GetComponent<MeshFilter>();
            var mesh = meshFilter.sharedMesh;
            var center = mesh.bounds.center;
            var extents = new Vector3(mesh.bounds.size.x * transform.localScale.x,mesh.bounds.size.y * transform.localScale.y,mesh.bounds.size.z * transform.localScale.z);
            colliderShape = extents;
            colliderOffset = center;
        }
    }


}